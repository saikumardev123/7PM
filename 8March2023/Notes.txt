Functions:

A function is a block of code that takes an input(optional), process it 
and provides some output(Result) is known as function. 

 syntax:

  function function_name(parameters){
   // code
  }

  function_name(arguments);

 function square(num) {
            console.log(num * num);
        }
        square(10);

  In JS, a function match is given priority over the signature of the function. hence, 
  if the function name is matched, then a function call will happen. 

   function f1(a, b) {
            console.log(a);
            console.log(b);
            console.log(arguments);
        }
        f1(10, 20, 40, 50);

    
Anonymous Functions:

A function without a name is known as anonymous function.

example: 

function(){ 

 // code

}

 function f1(x) {
            x();
        }
        f1(function () {
            console.log("anonymous function");
        });


realtime example:

 var arr = [10, 20, 30, 50, 80, 90];

        // for (var i = 0; i < arr.length; i++) {
        //     console.log(arr[i]);
        // }
        // arr.forEach(function (value) {
        //     console.log(value);
        // });


        // custom foreach
        function myownForEach(callbackFn) {
            for (var i = 0; i < arr.length; i++) {
                callbackFn(arr[i]);
            }
        }

        myownForEach(function (value) {
            console.log(value);
        })

Function Expressions:

if we can refer an anonymous function with a variable, then it is 
known as function expression. 

<html>

<head>

</head>

<body>

    <script>

        var arr = [10, 20, 30, 50, 80, 90];
        var arr2 = [10, 88, 77];
        var arr3 = ["user1", "user2", "user3"];
        var callback = function (value) { // function expression
            console.log(value);
        }
        console.log(callback);
        arr.forEach(callback);
        console.log("-----------------------------")
        arr2.forEach(callback)
        console.log("-----------------------------")
        arr3.forEach(callback);

        callback = null;
        console.log(callback);

    </script>

</body>

</html>

first class functions:

In JS, functions are treated as first class citizens and functions have the 
following capabilities. 

1. pass a function as an argument.
2. refer a function with a variable.
3. a function can return another function.

 function f1() {

            return function () {
                console.log("I am returned function");
            }

        }

        var x = f1();

        x();

Problem Statement:

[
  {
    "id": 1,
    "name": "Leanne Graham",
    "username": "Bret",
    "email": "Sincere@april.biz",
    "address": {
      "street": "Kulas Light",
      "suite": "Apt. 556",
      "city": "Gwenborough",
      "zipcode": "92998-3874",
      "geo": {
        "lat": "-37.3159",
        "lng": "81.1496"
      }
    },
    "phone": "1-770-736-8031 x56442",
    "website": "hildegard.org",
    "company": {
      "name": "Romaguera-Crona",
      "catchPhrase": "Multi-layered client-server neural-net",
      "bs": "harness real-time e-markets"
    }
  },
  {
    "id": 2,
    "name": "Ervin Howell",
    "username": "Antonette",
    "email": "Shanna@melissa.tv",
    "address": {
      "street": "Victor Plains",
      "suite": "Suite 879",
      "city": "Wisokyburgh",
      "zipcode": "90566-7771",
      "geo": {
        "lat": "-43.9509",
        "lng": "-34.4618"
      }
    },
    "phone": "010-692-6593 x09125",
    "website": "anastasia.net",
    "company": {
      "name": "Deckow-Crist",
      "catchPhrase": "Proactive didactic contingency",
      "bs": "synergize scalable supply-chains"
    }
  },
  {
    "id": 3,
    "name": "Clementine Bauch",
    "username": "Samantha",
    "email": "Nathan@yesenia.net",
    "address": {
      "street": "Douglas Extension",
      "suite": "Suite 847",
      "city": "McKenziehaven",
      "zipcode": "59590-4157",
      "geo": {
        "lat": "-68.6102",
        "lng": "-47.0653"
      }
    },
    "phone": "1-463-123-4447",
    "website": "ramiro.info",
    "company": {
      "name": "Romaguera-Jacobson",
      "catchPhrase": "Face to face bifurcated interface",
      "bs": "e-enable strategic applications"
    }
  }]



  display username, email and city on the console. 

  note: use forEach, map


  PS:  from the above array, create a new array of objects with the following 
  keys, 

   [
       {
           username: '',
           email: '',
           city: ''
       },
       {
           username: '',
           email: '',
           city: ''
       },
       {
           username: '',
           email: '',
           city: ''
       }
   ]

